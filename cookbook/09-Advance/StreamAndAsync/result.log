make clean
make[1]: Entering directory '/work/gitlab/tensorrt-cookbook-in-chinese/09-Advance/StreamAndAsync'
rm -rf ./*.d ./*.o ./*.so ./*.exe ./*.plan
make[1]: Leaving directory '/work/gitlab/tensorrt-cookbook-in-chinese/09-Advance/StreamAndAsync'
make
make[1]: Entering directory '/work/gitlab/tensorrt-cookbook-in-chinese/09-Advance/StreamAndAsync'
/usr/local/cuda/bin/nvcc -w -std=c++14 -O3 -UDEBUG -Xcompiler -fPIC -use_fast_math -I. -I/usr/local/cuda/include -I/usr/include/x86_64-linux-gnu -M -MT main.o -o main.d main.cpp
/usr/local/cuda/bin/nvcc -w -std=c++14 -O3 -UDEBUG -Xcompiler -fPIC -use_fast_math -I. -I/usr/local/cuda/include -I/usr/include/x86_64-linux-gnu -Xcompiler -fPIC -o main.o -c main.cpp
/usr/local/cuda/bin/nvcc -w -std=c++14 -O3 -UDEBUG -Xcompiler -fPIC -use_fast_math -L/usr/local/cuda/lib64 -lcudart -L/usr/lib/x86_64-linux-gnu -lnvinfer -o main.exe main.o
rm main.o
make[1]: Leaving directory '/work/gitlab/tensorrt-cookbook-in-chinese/09-Advance/StreamAndAsync'
python3 ./main.py
Succeeded building serialized engine!
Succeeded saving .plan file!
Succeeded building engine!
Bind[ 0]:i[ 0]-> DataType.FLOAT (-1, -1, -1, -1) (1, 3, 256, 256) inputT0
Bind[ 1]:o[ 0]-> DataType.FLOAT (-1, -1, -1, -1) (1, 3, 256, 256) (Unnamed Layer* 0) [Unary]_output
:(3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=196607.00000,Min=0.00000,SAD=196607.00000
	 [0. 1. 2. 3. 4.] [196603. 196604. 196605. 196606. 196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=-0.00000,Min=-196607.00000,SAD=196607.00000
	 [-0. -1. -2. -3. -4.] [-196603. -196604. -196605. -196606. -196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=196607.00000,Min=0.00000,SAD=196607.00000
	 [0. 1. 2. 3. 4.] [196603. 196604. 196605. 196606. 196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=-0.00000,Min=-196607.00000,SAD=196607.00000
	 [-0. -1. -2. -3. -4.] [-196603. -196604. -196605. -196606. -196607.]
nsys profile -o async --force-overwrite true python3 ./main.py
Succeeded building serialized engine!
Succeeded saving .plan file!
Succeeded building engine!
Bind[ 0]:i[ 0]-> DataType.FLOAT (-1, -1, -1, -1) (1, 3, 256, 256) inputT0
Bind[ 1]:o[ 0]-> DataType.FLOAT (-1, -1, -1, -1) (1, 3, 256, 256) (Unnamed Layer* 0) [Unary]_output
:(3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=196607.00000,Min=0.00000,SAD=196607.00000
	 [0. 1. 2. 3. 4.] [196603. 196604. 196605. 196606. 196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=-0.00000,Min=-196607.00000,SAD=196607.00000
	 [-0. -1. -2. -3. -4.] [-196603. -196604. -196605. -196606. -196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=196607.00000,Min=0.00000,SAD=196607.00000
	 [0. 1. 2. 3. 4.] [196603. 196604. 196605. 196606. 196607.]
:(1, 3, 256, 256),SumAbs=1.93273e+10,Var=3221224448.00000,Max=-0.00000,Min=-196607.00000,SAD=196607.00000
	 [-0. -1. -2. -3. -4.] [-196603. -196604. -196605. -196606. -196607.]
Generating '/tmp/nsys-report-3436.qdstrm'
[1/1] [0%                          ] async.nsys-rep[1/1] [0%                          ] async.nsys-rep[1/1] [6%                          ] async.nsys-rep[1/1] [13%                         ] async.nsys-rep[1/1] [============55%             ] async.nsys-rep[1/1] [5%                          ] async.nsys-rep[1/1] [2%                          ] async.nsys-rep[1/1] [1%                          ] async.nsys-rep[1/1] [0%                          ] async.nsys-rep[1/1] [=16%                        ] async.nsys-rep[1/1] [======33%                   ] async.nsys-rep[1/1] [==========47%               ] async.nsys-rep[1/1] [==============62%           ] async.nsys-rep[1/1] [==================76%       ] async.nsys-rep[1/1] [========================100%] async.nsys-rep[1/1] [========================100%] async.nsys-rep
Generated:
    /work/gitlab/tensorrt-cookbook-in-chinese/09-Advance/StreamAndAsync/async.nsys-rep
rm ./*.plan
././main.exe
Succeeded building serialized engine!
Succeeded building engine!
Succeeded saving .plan file!
Binding all? Yes
Bind[0]:i[0]->FLOAT (2, 3, 4, 5) inputT0
Bind[1]:o[0]->FLOAT (2, 3, 4, 5) (Unnamed Layer* 0) [Identity]_output

inputT0: (2, 3, 4, 5, )
absSum=7140.0000,mean=59.5000,var=1199.9167,max=119.0000,min= 0.0000,diff=119.0000,
 0.00000,  1.00000,  2.00000,  3.00000,  4.00000,  5.00000,  6.00000,  7.00000,  8.00000,  9.00000, 
110.00000, 111.00000, 112.00000, 113.00000, 114.00000, 115.00000, 116.00000, 117.00000, 118.00000, 119.00000, 
 0.000  1.000  2.000  3.000  4.000 
 5.000  6.000  7.000  8.000  9.000 
10.000 11.000 12.000 13.000 14.000 
15.000 16.000 17.000 18.000 19.000 

20.000 21.000 22.000 23.000 24.000 
25.000 26.000 27.000 28.000 29.000 
30.000 31.000 32.000 33.000 34.000 
35.000 36.000 37.000 38.000 39.000 

40.000 41.000 42.000 43.000 44.000 
45.000 46.000 47.000 48.000 49.000 
50.000 51.000 52.000 53.000 54.000 
55.000 56.000 57.000 58.000 59.000 


60.000 61.000 62.000 63.000 64.000 
65.000 66.000 67.000 68.000 69.000 
70.000 71.000 72.000 73.000 74.000 
75.000 76.000 77.000 78.000 79.000 

80.000 81.000 82.000 83.000 84.000 
85.000 86.000 87.000 88.000 89.000 
90.000 91.000 92.000 93.000 94.000 
95.000 96.000 97.000 98.000 99.000 

100.000 101.000 102.000 103.000 104.000 
105.000 106.000 107.000 108.000 109.000 
110.000 111.000 112.000 113.000 114.000 
115.000 116.000 117.000 118.000 119.000 




(Unnamed Layer* 0) [Identity]_output: (2, 3, 4, 5, )
absSum=7140.0000,mean=59.5000,var=1199.9167,max=119.0000,min= 0.0000,diff=119.0000,
 0.00000,  1.00000,  2.00000,  3.00000,  4.00000,  5.00000,  6.00000,  7.00000,  8.00000,  9.00000, 
110.00000, 111.00000, 112.00000, 113.00000, 114.00000, 115.00000, 116.00000, 117.00000, 118.00000, 119.00000, 
 0.000  1.000  2.000  3.000  4.000 
 5.000  6.000  7.000  8.000  9.000 
10.000 11.000 12.000 13.000 14.000 
15.000 16.000 17.000 18.000 19.000 

20.000 21.000 22.000 23.000 24.000 
25.000 26.000 27.000 28.000 29.000 
30.000 31.000 32.000 33.000 34.000 
35.000 36.000 37.000 38.000 39.000 

40.000 41.000 42.000 43.000 44.000 
45.000 46.000 47.000 48.000 49.000 
50.000 51.000 52.000 53.000 54.000 
55.000 56.000 57.000 58.000 59.000 


60.000 61.000 62.000 63.000 64.000 
65.000 66.000 67.000 68.000 69.000 
70.000 71.000 72.000 73.000 74.000 
75.000 76.000 77.000 78.000 79.000 

80.000 81.000 82.000 83.000 84.000 
85.000 86.000 87.000 88.000 89.000 
90.000 91.000 92.000 93.000 94.000 
95.000 96.000 97.000 98.000 99.000 

100.000 101.000 102.000 103.000 104.000 
105.000 106.000 107.000 108.000 109.000 
110.000 111.000 112.000 113.000 114.000 
115.000 116.000 117.000 118.000 119.000 



Succeeded getting serialized engine!
Succeeded loading engine!
Binding all? Yes
Bind[0]:i[0]->FLOAT (2, 3, 4, 5) inputT0
Bind[1]:o[0]->FLOAT (2, 3, 4, 5) (Unnamed Layer* 0) [Identity]_output

inputT0: (2, 3, 4, 5, )
absSum=7140.0000,mean=59.5000,var=1199.9167,max=119.0000,min= 0.0000,diff=119.0000,
 0.00000,  1.00000,  2.00000,  3.00000,  4.00000,  5.00000,  6.00000,  7.00000,  8.00000,  9.00000, 
110.00000, 111.00000, 112.00000, 113.00000, 114.00000, 115.00000, 116.00000, 117.00000, 118.00000, 119.00000, 
 0.000  1.000  2.000  3.000  4.000 
 5.000  6.000  7.000  8.000  9.000 
10.000 11.000 12.000 13.000 14.000 
15.000 16.000 17.000 18.000 19.000 

20.000 21.000 22.000 23.000 24.000 
25.000 26.000 27.000 28.000 29.000 
30.000 31.000 32.000 33.000 34.000 
35.000 36.000 37.000 38.000 39.000 

40.000 41.000 42.000 43.000 44.000 
45.000 46.000 47.000 48.000 49.000 
50.000 51.000 52.000 53.000 54.000 
55.000 56.000 57.000 58.000 59.000 


60.000 61.000 62.000 63.000 64.000 
65.000 66.000 67.000 68.000 69.000 
70.000 71.000 72.000 73.000 74.000 
75.000 76.000 77.000 78.000 79.000 

80.000 81.000 82.000 83.000 84.000 
85.000 86.000 87.000 88.000 89.000 
90.000 91.000 92.000 93.000 94.000 
95.000 96.000 97.000 98.000 99.000 

100.000 101.000 102.000 103.000 104.000 
105.000 106.000 107.000 108.000 109.000 
110.000 111.000 112.000 113.000 114.000 
115.000 116.000 117.000 118.000 119.000 




(Unnamed Layer* 0) [Identity]_output: (2, 3, 4, 5, )
absSum=7140.0000,mean=59.5000,var=1199.9167,max=119.0000,min= 0.0000,diff=119.0000,
 0.00000,  1.00000,  2.00000,  3.00000,  4.00000,  5.00000,  6.00000,  7.00000,  8.00000,  9.00000, 
110.00000, 111.00000, 112.00000, 113.00000, 114.00000, 115.00000, 116.00000, 117.00000, 118.00000, 119.00000, 
 0.000  1.000  2.000  3.000  4.000 
 5.000  6.000  7.000  8.000  9.000 
10.000 11.000 12.000 13.000 14.000 
15.000 16.000 17.000 18.000 19.000 

20.000 21.000 22.000 23.000 24.000 
25.000 26.000 27.000 28.000 29.000 
30.000 31.000 32.000 33.000 34.000 
35.000 36.000 37.000 38.000 39.000 

40.000 41.000 42.000 43.000 44.000 
45.000 46.000 47.000 48.000 49.000 
50.000 51.000 52.000 53.000 54.000 
55.000 56.000 57.000 58.000 59.000 


60.000 61.000 62.000 63.000 64.000 
65.000 66.000 67.000 68.000 69.000 
70.000 71.000 72.000 73.000 74.000 
75.000 76.000 77.000 78.000 79.000 

80.000 81.000 82.000 83.000 84.000 
85.000 86.000 87.000 88.000 89.000 
90.000 91.000 92.000 93.000 94.000 
95.000 96.000 97.000 98.000 99.000 

100.000 101.000 102.000 103.000 104.000 
105.000 106.000 107.000 108.000 109.000 
110.000 111.000 112.000 113.000 114.000 
115.000 116.000 117.000 118.000 119.000 



