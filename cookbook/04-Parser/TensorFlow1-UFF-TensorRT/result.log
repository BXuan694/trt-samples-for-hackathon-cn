Extracting /work/gitlab/tensorrt-cookbook-in-chinese/04-Parser/TensorFlow1-UFF-TensorRT/../../00-MNISTData/train-images-idx3-ubyte.gz
Extracting /work/gitlab/tensorrt-cookbook-in-chinese/04-Parser/TensorFlow1-UFF-TensorRT/../../00-MNISTData/train-labels-idx1-ubyte.gz
Extracting /work/gitlab/tensorrt-cookbook-in-chinese/04-Parser/TensorFlow1-UFF-TensorRT/../../00-MNISTData/t10k-images-idx3-ubyte.gz
Extracting /work/gitlab/tensorrt-cookbook-in-chinese/04-Parser/TensorFlow1-UFF-TensorRT/../../00-MNISTData/t10k-labels-idx1-ubyte.gz
2022-08-10 16:45:10.150834, step 0, acc = 0.093750
2022-08-10 16:45:16.912805, step 100, acc = 0.929688
2022-08-10 16:45:17.480300, step 200, acc = 0.937500
2022-08-10 16:45:18.047544, step 300, acc = 0.937500
2022-08-10 16:45:18.619428, step 400, acc = 0.945312
2022-08-10 16:45:19.204477, step 500, acc = 0.937500
2022-08-10 16:45:19.783826, step 600, acc = 0.968750
2022-08-10 16:45:20.362898, step 700, acc = 0.968750
2022-08-10 16:45:20.932577, step 800, acc = 0.960938
2022-08-10 16:45:21.503086, step 900, acc = 0.984375
2022-08-10 16:45:22.071202, test acc = 0.980000
Succeeded building model in TensorFlow!
NOTE: UFF has been tested with TensorFlow 1.15.0.
WARNING: The version of TensorFlow installed on this system is not guaranteed to work with UFF.
UFF Version 0.6.9
=== Automatically deduced input nodes ===
[name: "x"
op: "Placeholder"
attr {
  key: "dtype"
  value {
    type: DT_FLOAT
  }
}
attr {
  key: "shape"
  value {
    shape {
      dim {
        size: -1
      }
      dim {
        size: 28
      }
      dim {
        size: 28
      }
      dim {
        size: 1
      }
    }
  }
}
]
=========================================

Using output node y
Converting to UFF graph
DEBUG [/usr/local/lib/python3.8/dist-packages/uff/converters/tensorflow/converter.py:143] Marking ['y'] as outputs
No. nodes: 26
UFF Output written to ./model.uff
Succeeded converting model into uff!
Binding0-> (28, 28, 1) (28, 28, 1) DataType.FLOAT
Binding1-> (10, 1, 1) (10, 1, 1) DataType.FLOAT
inputH0 : (28, 28)
outputH0: (10, 1, 1)
[[[0.]]

 [[0.]]

 [[0.]]

 [[0.]]

 [[0.]]

 [[0.]]

 [[0.]]

 [[0.]]

 [[1.]]

 [[0.]]]
Succeeded running model in TensorRT!
